repeat wait() until game:IsLoaded()
  if game.placeId == 8569358381 or game.placeId == 3237168 then
_G.statss = true
local Pedo = {
    1135910299, -- Havelic
    520944, -- Oblivic
    43247021, -- BowTiedPony
    2350183594, -- icydragonwingsis
    835620275, -- Silvers_Rayleig
    137621, -- mariobros38
    295337577 -- ModeratorDaMarcuses
}

for _, v in pairs(game:GetService("Players"):GetPlayers()) do
    for _, v1 in pairs(Pedo) do
        if v.UserId == v1 then
            game:GetService("Players").LocalPlayer:Kick("Admin is in the server")
        end
    end
end

game:GetService("Players").PlayerAdded:Connect(function(r)
    for _, v in pairs(Pedo) do
        if r.UserId == v then
            game:GetService("Players").LocalPlayer:Kick("Admin or Staff has joined the server")
        end
    end
end)  

local listed = {
"1884245e-ea3d-46c8-bf60-eb0c86edd21b",-- SALUNA
"76bf8d34-a05a-4803-8c43-24656f4fd7dd", -- Khôi
"e8b1aa3d-a419-4553-9965-845e9f83951d", -- Hiếu Trung
"743b921d-a215-4c71-99c6-29229e61e357" -- Khoa GK
}
_G.WhiteListed = false
        for _, v1 in pairs(listed) do
local gethwid = game:GetService("RbxAnalyticsService"):GetClientId()
            if gethwid == v1 then
_G.WhiteListed = true
            end
        end
if _G.WhiteListed then 
    local vu = game:GetService("VirtualUser")
    game:GetService("Players").LocalPlayer.Idled:connect(function()
       vu:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
       wait(1)
       vu:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
    end)


local Players = game:GetService("Players")
    local cache = {}
    function lol(name)
        if cache[name] then return cache[name] end
        local player = Players:FindFirstChild(name)
        if player then
            cache[name] = player.UserId
            return player.UserId
        end 
    
        local id
        pcall(function ()
            id = Players:lol(name)
        end)
        cache[name] = id
        return id
    end
    local ehh = game.Players.LocalPlayer.Name
    local Final = lol(ehh)
    getgenv().firstfruit = game.Workspace.UserData["User_"..Final].Data["DevilFruit"].Value
    getgenv().secondfruit = game.Workspace.UserData["User_"..Final].Data["DevilFruit2"].Value

   do  
    local fishingplace =  game:GetService("Workspace"):FindFirstChild("fishingplace")  
    if fishingplace then 
    fishingplace:Destroy() 
    end 
    end
    local fishingplace = Instance.new("Part",game.Workspace)
    fishingplace.Name = "fishingplace"
    fishingplace.Size = Vector3.new(2,1,2)
    fishingplace.Position = Vector3.new(19784, 210,5000)
    fishingplace.Anchored = true
    
    do  
    local safezonedestroyspace =  game:GetService("Workspace"):FindFirstChild("SafeZoneOuterSpacePart")  
    if safezonedestroyspace then 
    safezonedestroyspace:Destroy() 
    end 
    end
        if game.CoreGui:FindFirstChild("BBB") then
            game.CoreGui:FindFirstChild("BBB"):Destroy()
        end
    local SafeZoneOuterSpace = Instance.new("Part",game.Workspace)
    SafeZoneOuterSpace.Name = "SafeZoneOuterSpacePart"
    SafeZoneOuterSpace.Size = Vector3.new(200,3,200)
    SafeZoneOuterSpace.Position = Vector3.new((math.random(-100000, 100000)), 10000, (math.random(-100000, 100000)))
    SafeZoneOuterSpace.Anchored = true
local mta = getrawmetatable(game)
local namecall = mta.__namecall
local setreadonly = setreadonly or make_writable


setreadonly(mta, false)

mta.__namecall = newcclosure(function(self, ...)
    local args = {...}
    local arguments = args
    local a = {}
    for i = 1, #arguments - 1 do
        a[i] = arguments[i]
    end
    local method = getnamecallmethod() 

    if method == 'FireServer' or method == "InvokeServer" then
        if self.Name == 'Drown' and _G.nowaterdamage then
            if args[1] then
                return nil
            end
        end
    end
    
    return namecall(self, ...)    
end)

local attackremote = {}    

local a
a=hookmetamethod(game,"__namecall",function(self,...)
    local args = {...}
    local method = getnamecallmethod()
    if method == "FireServer" or method == "InvokeServer" then
        if self.Name == "RequestAnimation" and game.Players.LocalPlayer.Character.Humanoid.Health ~= 0 then
            attackremote[self.Name] = args[1]
            return a(self,unpack(args))
        elseif self.Name == "RequestAnimation" and game.Players.LocalPlayer.Character.Humanoid.Health == 0 then
            attackremote[self.Name] = ""
        end
    end
      return a(self,...)
end)

aaxc = hookmetamethod(game, "__namecall", function(self, ...)
    local args = {...}
    local method = getnamecallmethod()
    if method == "FireServer" or method == "InvokeServer" then
        if self.Name == "RemoteEvent" and args[3] == "StopCharging" and _G.auto100rate then
            args[6] = 100
            return aaxc(self, unpack(args))
        end
    end
    return aaxc(self, ...)
end)

local remotes = {}
    local azc
    azc=hookmetamethod(game,"__namecall",function(self,...)
        local args = {...}
        local method = getnamecallmethod()
        if method == "FireServer" or method == "InvokeServer" then
            if self.Name == "RemoteEvent" and args[3] == "StopCharging" or args[3] == "Create" then
                remotes[self.Name] = args[1]
                return azc(self,unpack(args))
            end
        end
          return azc(self,...)
    end)
    
    function serializeTable(val, name, skipnewlines, depth)
    skipnewlines = skipnewlines or false
    depth = depth or 0
 
    local tmp = string.rep("", depth)
 
    if name then tmp = tmp end
 
    if type(val) == "table" then
        tmp = tmp .. (not skipnewlines and "" or "")
 
        for k, v in pairs(val) do
            tmp =  tmp .. serializeTable(v, k, skipnewlines, depth + 1) .. (not skipnewlines and "" or "")
        end
 
        tmp = tmp .. string.rep("", depth) 
    elseif type(val) == "number" then
        tmp = tmp .. tostring(val)
    elseif type(val) == "string" then
        tmp = tmp .. string.format("%q", val)
    elseif type(val) == "boolean" then
        tmp = tmp .. (val and "true" or "false")
    elseif type(val) == "function" then
        tmp = tmp  .. "func: " .. debug.getinfo(val).name
    else
        tmp = tmp .. tostring(val)
    end
 
    return tmp
 end

local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/AdamFatherOfCreator/UI123/main/Fluent"))()
local Window = Fluent:CreateWindow({
    Title = "SALUNA HUB (G2)",
    SubTitle = "Made by Irenkiss",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Aqua",
    MinimizeKey = Enum.KeyCode.LeftControl -- Used when theres no MinimizeKeybind
})
--Fluent provides Lucide Icons https://lucide.dev/icons/ for the tabs, icons are optional
local Tabs = {
    Main = Window:AddTab({ Title = "Stats", Icon = "rbxassetid://8587689304" }),
    Farm = Window:AddTab({ Title = "Farming", Icon = "rbxassetid://2294529381" }),
    Affinity = Window:AddTab({ Title = "Affinity", Icon = "rbxassetid://13321880274" }),
    Teleport = Window:AddTab({ Title = "Teleport", Icon = "rbxassetid://6723742952" }),
    Player = Window:AddTab({ Title = "Player", Icon = "rbxassetid://16149111731" }),
    Automatic = Window:AddTab({ Title = "Automatic", Icon = "rbxassetid://11860859170" }),
    Server = Window:AddTab({ Title = "Server", Icon = "rbxassetid://7539983773" }),
    Webhook = Window:AddTab({ Title = "Webhook", Icon = "rbxassetid://14769727847" }),
    Misc = Window:AddTab({ Title = "Misc", Icon = "rbxassetid://16181364687" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" }),
    nonef = Window:AddTab({ Title = "-------", Icon = "" }),
    nonet = Window:AddTab({ Title = "-------", Icon = "" })
}
local Options = Fluent.Options

local Cannon = Tabs.Farm:AddSection("Cannon Farming")

local autocannonmob = Tabs.Farm:AddToggle("cannonmobtoggle", {Title = "Auto Farm Mob (Cannon)", Default = false })
autocannonmob:OnChanged(function()
if Options.cannonmobtoggle.Value == true then
_G.autocannonslow = true
else
_G.autocannonslow = false
end
end)
Options.cannonmobtoggle:SetValue(false)

local autocannonplr = Tabs.Farm:AddToggle("cannonplrtoggle", {Title = "Auto Kill All Player (Cannon)", Default = false })
autocannonplr:OnChanged(function()
if Options.cannonplrtoggle.Value == true then
_G.autocannonplr = true
else
_G.autocannonplr = false
end
end)
Options.cannonplrtoggle:SetValue(false)

    spawn(function() -- autofarm teleport cannon
    while wait() do
        pcall(function()
            if _G.autocannonplr then
                for i,v in pairs(game.Players:GetChildren()) do
                    if v.Name ~= game.Players.LocalPlayer.Name then
                        v.Character.HumanoidRootPart.Transparency = 0.9
                    	v.Character.HumanoidRootPart.Color = Color3.fromRGB(255, 255, 255)
                        v.Character.HumanoidRootPart.CanCollide = false
                        v.Character.HumanoidRootPart.Size = Vector3.new(10, 10, 10)
                        if v.Character.Humanoid.Health == 0 then
                            v.Character.HumanoidRootPart.Size = Vector3.new(2, 2, 1)
                            v.Character.HumanoidRootPart.Transparency = 1
                        end
                    end
                end
            end
        end)
    end
end)

spawn(function()
    while task.wait() do
        pcall(function()
local plr = game.Players.LocalPlayer
if _G.autocannonslow or _G.autocannonplr then
for i,v in pairs(plr.Backpack:GetChildren()) do
if v.Name == "Cannon Ball" then
v.Parent = plr.Character
end
end
end
      end)
   end
end)

spawn(function()
    while task.wait() do
        pcall(function()
            if _G.autocannonplr or _G.autocannonslow then
                local args = {
                    [1] = CFrame.new(Vector3.new(game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame))
                }
                game:GetService("Players").LocalPlayer.Character:FindFirstChild("Cannon Ball").RemoteEvent:FireServer(unpack(args))
                wait()
                local args = {
                    [1] = CFrame.new(Vector3.new(game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame))
                }
                game:GetService("Players").LocalPlayer.Character:FindFirstChild("Cannon Ball").RemoteEvent:FireServer(unpack(args))
                wait()
                if game.workspace.ResourceHolder["Resources_" .. game.Players.LocalPlayer.UserId]:FindFirstChild("CannonBall") then
                    game.workspace.ResourceHolder["Resources_" .. game.Players.LocalPlayer.UserId]:FindFirstChild("CannonBall").CanCollide = false
                end
            end
        end)
    end
end)

spawn(function() -- autofarm velocity
    while wait(0) do
        pcall(function()
            if _G.autocannonslow or _G.autocannonplr or getgenv().bgtyhn or getgenv().fishing or getgenv().tret or getgenv().e or getgenv().c or getgenv().a or getgenv().t or getgenv().emladepnwwhat or getgenv().emladepnhat then
                if not game:GetService("Players").LocalPlayer.Character.HumanoidRootPart:FindFirstChild("BodyClip") then
                    local Noclip = Instance.new("BodyVelocity")
                    Noclip.Name = "BodyClip"
                    Noclip.Parent = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart
                    Noclip.MaxForce = Vector3.new(100000,100000,100000)
                    Noclip.Velocity = Vector3.new(0,0,0)
                end
                game.Players.LocalPlayer.Character.Humanoid.JumpPower = 0
            elseif _G.autocannonslow == false or _G.autocannonplr == false or getgenv().bgtyhn == false or getgenv().fishing == false or getgenv().tret == false or  getgenv().e == false or getgenv().c == false or getgenv().a == false or getgenv().t == false or getgenv().emladepnwwhat == false or getgenv().emladepnhat == false then
                --if game:GetService("Players").LocalPlayer.Character.HumanoidRootPart:FindFirstChild("BodyClip") then
                game:GetService("Players").LocalPlayer.Character.HumanoidRootPart:FindFirstChild("BodyClip"):Destroy()
                wait(1)
                --end
                game.Players.LocalPlayer.Character.Humanoid.JumpPower = 50
            end
        end)
    end
end)

spawn(function()
    while task.wait() do
        pcall(function()
            if _G.autocannonslow then
                repeat task.wait(0.2)
                    for i, v in pairs(game.workspace.ResourceHolder["Resources_" .. game.Players.LocalPlayer.UserId]:GetChildren()) do
                        if v.Name == "CannonBall" then
                            v.CFrame = CFrame.new(100, 3000, 800)
                            v.CanCollide = true
                        end
                    end
                until _G.autocannonslow == false or game.Players.LocalPlayer.Character.Humanoid.Health == 0
            end
        end)
    end
end)

spawn(function() --autohaki cannon
local plrid = tostring(game.Players.LocalPlayer.UserId)
local plr = tostring(game.Players.LocalPlayer)
while wait() do
if _G.autohakicannon then wait()
local slv = game.workspace.UserData["User_"..plrid].Data.HakiLevel.Value
local sss = slv/100*30
local haki = game:GetService("Workspace").UserData["User_"..plrid].Data.HakiLevel.Value
local currenthaki = game.Workspace.UserData["User_"..plrid].HakiBar.Value
local x = game.Players.LocalPlayer.UserId
pcall(function()
fireclickdetector(workspace.Island11.CentralBuilding.Doors.Button.Button.ClickDetector)

if game.Workspace.UserData["User_"..plrid].HakiBar.Value > sss and not game.Players.LocalPlayer.PlayerGui.HealthBar.Frame.Status:FindFirstChild("BusoHaki") then
wait(0.5)
game.workspace.UserData["User_" .. game.Players.LocalPlayer.UserId].UpdateHaki:FireServer()
repeat task.wait()
until game.Workspace.UserData["User_"..plrid].HakiBar.Value >= slv or game.Players.LocalPlayer.Character.Humanoid.Health == 0 or _G.autohakicannon == false
end

if game.Workspace.UserData["User_"..plrid].HakiBar.Value <= sss and game.Players.LocalPlayer.PlayerGui.HealthBar.Frame.Status:FindFirstChild("BusoHaki") then
wait(0.5)
game.workspace.UserData["User_" .. game.Players.LocalPlayer.UserId].UpdateHaki:FireServer()
 local Players = game:GetService("Players")
local cache = {}
    function lol(name)
        if cache[name] then return cache[name] end
        local player = Players:FindFirstChild(name)
        if player then
            cache[name] = player.UserId
            return player.UserId
        end 
    
        local id
        pcall(function ()
            id = Players:lol(name)
        end)
        cache[name] = id
        return id
    end
    local ehh = game.Players.LocalPlayer.Name
    local Final = lol(ehh)
for i = 1,15 do wait()
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..x].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..x].III:FireServer(unpack(args))
    end
task.wait(2)
        local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..x].III:FireServer(unpack(args))
wait()
        local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..x].III:FireServer(unpack(args))
wait(13)
repeat task.wait()
until game.Workspace.UserData["User_"..plrid].HakiBar.Value >= slv or game.Players.LocalPlayer.Character.Humanoid.Health == 0 or _G.autohakicannon == false
end


end)
end
end

spawn(function() -- autofarm cannon
    while wait() do
        pcall(function()
            if _G.autocannonslow then
                for _,v in pairs(game.Workspace.Enemies:GetChildren()) do
                    if string.find(v.Name, " Boar")
                    and v:FindFirstChild("HumanoidRootPart") then
                        v.HumanoidRootPart.CanCollide = false
                    	v.HumanoidRootPart.Size = Vector3.new(10, 10, 10)
                        v:FindFirstChild("HumanoidRootPart").Anchored = true
                        v:FindFirstChild("HumanoidRootPart").CFrame = CFrame.new(100, 3000, 800)
                        if v.Humanoid.Health == 0 then
                            v.HumanoidRootPart.Size = Vector3.new(0, 0, 0)
                            v:Destroy()
                        end
                     end
                end
                for _,v in pairs(game.Workspace.Enemies:GetChildren()) do
                    if string.find(v.Name, "Crab")
                    and v:FindFirstChild("HumanoidRootPart") then
                        v.HumanoidRootPart.CanCollide = false
                    	v.HumanoidRootPart.Size = Vector3.new(10, 10, 10)
                        --v.HumanoidRootPart.Color = Color3.fromRGB(255, 255, 255)
                        v.HumanoidRootPart.Transparency = 0.9
                        v:FindFirstChild("HumanoidRootPart").Anchored = true
                        v:FindFirstChild("HumanoidRootPart").CFrame = CFrame.new(100, 3000, 800)
                        if v.Humanoid.Health == 0 then
                            v.HumanoidRootPart.Size = Vector3.new(0, 0, 0)
                            v:Destroy()
                        end
                     end
                end
                for _,v in pairs(game.Workspace.Enemies:GetChildren()) do
                    if string.find(v.Name, "Angry ") 
                    or string.find(v.Name, "Bandit") 
                    or string.find(v.Name, "Thief")
                    or string.find(v.Name, "Bruno") 
                    or string.find(v.Name, "Bucky") 
                    or string.find(v.Name, " Vokun") 
                    or string.find(v.Name, "Freddy")  
                    or string.find(v.Name, "Cave ") 
                    or string.find(v.Name, "Thug") 
                    or string.find(v.Name, "Gunslinger")
                    or string.find(v.Name, "Gunner") 
                    or string.find(v.Name, "Buster") 
                    and v:FindFirstChild("HumanoidRootPart") then
                        v.HumanoidRootPart.CanCollide = false
                    	v.HumanoidRootPart.Size = Vector3.new(10, 10, 10)
                        v:FindFirstChild("HumanoidRootPart").Anchored = true
                        v:FindFirstChild("HumanoidRootPart").CFrame = CFrame.new(100, 3000, 800)
                        if v.Humanoid.Health == 0 then
                            v.HumanoidRootPart.Size = Vector3.new(0, 0, 0)
                            v:Destroy()
                        end
                        if v.Humanoid.Health == 0 then
                            v.HumanoidRootPart.Size = Vector3.new(0, 0, 0)
                            v:Destroy()
                        end
                    end
                end
            end
        end)
    end
end)

spawn(function()
while wait() do
pcall(function()
if _G.autocannonplr then
wait()
for i,v in pairs(game.Players:GetChildren()) do
	if v.Name ~= game.Players.LocalPlayer.Name then
		for i,c in pairs(game.Workspace:GetChildren()) do
			if c:IsA("Model") and c.Name == v.Name and c.Humanoid.Health > 0 and c.HumanoidRootPart.Position.Y < 211000 then
Choose2 = c.Name
	pcall(function()
		if _G.autocannonplr == true and c.Humanoid.Health > 0 and c.HumanoidRootPart.Position.Y < 211000 then
    			for i,v in pairs(game:GetService("Workspace"):GetChildren()) do
      				if v.Name == Choose2 then
                repeat task.wait(0.31)
					for i, q in pairs(game.workspace.ResourceHolder["Resources_" .. game.Players.LocalPlayer.UserId]:GetChildren()) do
                      				if q.Name == "CannonBall" then
                          			q.CFrame = v.HumanoidRootPart.CFrame
                           			q.CanCollide = true
						end
					end
until  c.Humanoid.Health <= 0 or _G.autocannonplr == false or c.HumanoidRootPart.Position.Y > 211000 or c.Name ~= v.Name
				end
			end
		end
	end)

			end
		end
	end
end

end
end)
end
end)

spawn(function()
while wait() do
pcall(function()
if _G.autocannonplr then
wait()
for i,d in pairs(game.Players:GetChildren()) do
	if d.Name ~= game.Players.LocalPlayer.Name and d.Name ~= Choose2 then
		for i,b in pairs(game.Workspace:GetChildren()) do
			if b:IsA("Model") and b.Name == d.Name and b.Humanoid.Health > 0 and b.HumanoidRootPart.Position.Y < 211000 then
Choose3 = b.Name
	pcall(function()
		if _G.autocannonplr == true and b.Humanoid.Health > 0 and b.HumanoidRootPart.Position.Y < 211000 then
    			for i,d in pairs(game:GetService("Workspace"):GetChildren()) do
      				if d.Name == Choose3 then
                repeat task.wait(0.32)
					for i, e in pairs(game.workspace.ResourceHolder["Resources_" .. game.Players.LocalPlayer.UserId]:GetChildren()) do
                      				if e.Name == "CannonBall" then
                          			e.CFrame = d.HumanoidRootPart.CFrame
                           			e.CanCollide = true
						end
					end
until  b.Humanoid.Health <= 0 or _G.autocannonplr == false or b.HumanoidRootPart.Position.Y > 211000 or b.Name ~= d.Name
				end
			end
		end
	end)

			end
		end
	end
end

end
end)
end
end)

spawn(function()
while wait() do
pcall(function()
if _G.autocannonplr then
wait()
for i,f in pairs(game.Players:GetChildren()) do
	if f.Name ~= game.Players.LocalPlayer.Name and f.Name ~= Choose2 and f.Name ~= Choose3 then
		for i,h in pairs(game.Workspace:GetChildren()) do
			if h:IsA("Model") and h.Name == f.Name and h.Humanoid.Health > 0 and h.HumanoidRootPart.Position.Y < 211000 then
Choose4 = h.Name
	pcall(function()
		if _G.autocannonplr == true and h.Humanoid.Health > 0 and h.HumanoidRootPart.Position.Y < 211000 then
    			for i,f in pairs(game:GetService("Workspace"):GetChildren()) do
      				if f.Name == Choose4 then
                repeat task.wait(0.33)
					for i, w in pairs(game.workspace.ResourceHolder["Resources_" .. game.Players.LocalPlayer.UserId]:GetChildren()) do
                      				if w.Name == "CannonBall" then
                          			w.CFrame = f.HumanoidRootPart.CFrame
                           			w.CanCollide = true
						end
					end
until  h.Humanoid.Health <= 0 or _G.autocannonplr == false or h.HumanoidRootPart.Position.Y > 211000 or h.Name ~= f.Name
				end
			end
		end
	end)

			end
		end
	end
end

end
end)
end
end)

spawn(function()
while wait() do
pcall(function()
if _G.autocannonplr then
wait()
for i,g in pairs(game.Players:GetChildren()) do
	if g.Name ~= game.Players.LocalPlayer.Name and g.Name ~= Choose2 and g.Name ~= Choose3 and g.Name ~= Choose4 then
		for i,j in pairs(game.Workspace:GetChildren()) do
			if j:IsA("Model") and j.Name == g.Name and j.Humanoid.Health > 0 and j.HumanoidRootPart.Position.Y < 211000 then
Choose5 = j.Name
	pcall(function()
		if _G.autocannonplr == true and j.Humanoid.Health > 0 and j.HumanoidRootPart.Position.Y < 211000 then
    			for i,g in pairs(game:GetService("Workspace"):GetChildren()) do
      				if g.Name == Choose5 then
                repeat task.wait(0.34)
					for i, t in pairs(game.workspace.ResourceHolder["Resources_" .. game.Players.LocalPlayer.UserId]:GetChildren()) do
                      				if t.Name == "CannonBall" then
                          			t.CFrame = g.HumanoidRootPart.CFrame
                           			t.CanCollide = true
						end
					end
until  j.Humanoid.Health <= 0 or _G.autocannonplr == false or j.HumanoidRootPart.Position.Y > 211000 or j.Name ~= g.Name
				end
			end
		end
	end)

			end
		end
	end
end

end
end)
end
end)






local Autospawn = Tabs.Misc:AddSection("Auto Spawn")

local AutospawnToggle = Tabs.Misc:AddToggle("Autospawn1Toggle", {Title = "Auto Spawn", Default = false })
    AutospawnToggle:OnChanged(function()
if Options.Autospawn1Toggle.Value == true then
_G.autospawn = true
Fluent:Notify({
    Title = "Auto Function Notify",
    Content = "Auto Spawn Is Turned On",
    Duration = 5
})
else
_G.autospawn = false
end
end)
Options.Autospawn1Toggle:SetValue(false)

        spawn(function()
            while wait() do
                if _G.autospawn then
                    pcall(function()
                        if game:GetService("Players").LocalPlayer.PlayerGui.Load.Frame.Visible == true then
                            repeat wait(4)
                                for i,v in pairs(getconnections(game:GetService("Players").LocalPlayer.PlayerGui.Load.Frame.Load.MouseButton1Click)) do
                                    v.Function()
                                end
                            until game:GetService("Players").LocalPlayer.PlayerGui.Load.Frame.Visible == false
                        end
                    end)
                end
            end
	end)

local Autogetquest = Tabs.Misc:AddSection("Auto Get Quest")



local Autorj = Tabs.Automatic:AddSection("Automatic Function")
local AutorjToggle = Tabs.Automatic:AddToggle("Autorj1Toggle", {Title = "Auto Hop Server If Disconnect", Default = false })
    AutorjToggle:OnChanged(function()
if Options.Autorj1Toggle.Value == true then
_G.autorj = true
Fluent:Notify({
    Title = "Auto Function Notify",
    Content = "Auto Reconnect Is Turned On",
    Duration = 5
})
else
_G.autorj = false
end
end)
Options.Autorj1Toggle:SetValue(false)

spawn(function()
while true do wait()
if _G.autorj then
pcall(function()
if game.CoreGui.RobloxPromptGui.promptOverlay.Active == true then
            local PlaceID = game.PlaceId
            local AllIDs = {}
            local foundAnything = ""
            local actualHour = os.date("!*t").hour
            local Deleted = false
            function TPReturner()
                local Site;
                if foundAnything == "" then
                    Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
                else
                    Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
                end
                local ID = ""
                if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
                    foundAnything = Site.nextPageCursor
                end
                local num = 0;
                for i,v in pairs(Site.data) do
                    local Possible = true
                    ID = tostring(v.id)
                    if tonumber(v.maxPlayers) > tonumber(v.playing) then
                        for _,Existing in pairs(AllIDs) do
                            if num ~= 0 then
                                if ID == tostring(Existing) then
                                    Possible = false
                                end
                            else
                                if tonumber(actualHour) ~= tonumber(Existing) then
                                    local delFile = pcall(function()
                                        -- delfile("NotSameServers.json")
                                        AllIDs = {}
                                        table.insert(AllIDs, actualHour)
                                    end)
                                end
                            end
                            num = num + 1
                        end
                        if Possible == true then
                            table.insert(AllIDs, ID)
                            wait()
                            pcall(function()
                                -- writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
                                wait()
                                game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID, game.Players.LocalPlayer)
                            end)
                            wait(.1)
                        end
                    end
                end
            end
            function Teleport() 
                while wait() do
                    pcall(function()
                        TPReturner()
                        if foundAnything ~= "" then
                            TPReturner()
                        end
                    end)
                end
            end
            Teleport()
end
end)
end
end
end)

local Safe = Tabs.Teleport:AddSection("Special Teleport")

Tabs.Teleport:AddButton({
        Title = "Teleport To Safe Zone",
        Description = "(A high platform)",
        Callback = function()
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace")["SafeZoneOuterSpacePart"].CFrame * CFrame.new(0, 5, 0)
        end
    })

Tabs.Teleport:AddButton({
        Title = "Teleport To Rayleigh",
        Description = "Check and teleport to Rayleigh if he spawns",
        Callback = function()
if game:GetService("Workspace").Merchants.QuestHakiMerchant.Clickable.Available.Value == true then
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Merchants.QuestHakiMerchant.HumanoidRootPart.CFrame
else
Fluent:Notify({
    Title = "Rayleigh Notify",
    Content = "Rayleigh hasn't spawned yet",
    Duration = 4
})
end
        end
    })

Tabs.Teleport:AddButton({
        Title = "Teleport To Dark Atlas",
        Description = "(Legendary Pedestal)",
        Callback = function()
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Workspace.Altar.RecepticalEffect.CFrame * CFrame.new(0, 0, 0)
        end
    })

local Tmrt = Tabs.Teleport:AddSection("Teleport")

local MobsTP = Tabs.Teleport:AddDropdown("Dropdown", {
        Title = "NPC Teleport",
        Values = {"nil", "Bartender (Sam)", "Bartender (Bar)", "Sam", "Friend", "Cannon Seller", "Krizma Seller", "Flair Seller", "Sword Seller", "Gun Seller", "Merlin", "Emotes Teacher", "Lucy (Affinity)", "Chef", "Expertise Giver"},
        Multi = false,
        Default = 2,
    })

    MobsTP:SetValue("nil")

    MobsTP:OnChanged(function(Mobbb)
if Mobbb == "Bartender (Sam)" then
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Merchants.DrinkMerchant.HumanoidRootPart.CFrame
Fluent:Notify({
    Title = "Teleport Notify",
    Content = "Teleported to " ..Mobbb,
    Duration = 1
})
elseif Mobbb == "Bartender (Bar)" then
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Merchants.BetterDrinkMerchant.HumanoidRootPart.CFrame
Fluent:Notify({
    Title = "Teleport Notify",
    Content = "Teleported to " ..Mobbb,
    Duration = 1
})
elseif Mobbb == "Sam" then
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Merchants.QuestMerchant.HumanoidRootPart.CFrame
Fluent:Notify({
    Title = "Teleport Notify",
    Content = "Teleported to " ..Mobbb,
    Duration = 1
})
elseif Mobbb == "Friend" then
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Merchants.FriendMerchant.HumanoidRootPart.CFrame
Fluent:Notify({
    Title = "Teleport Notify",
    Content = "Teleported to " ..Mobbb,
    Duration = 1
})
elseif Mobbb == "Cannon Seller" then
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Merchants.HeavyWeaponsMerchant.HumanoidRootPart.CFrame
Fluent:Notify({
    Title = "Teleport Notify",
    Content = "Teleported to " ..Mobbb,
    Duration = 1
})
elseif Mobbb == "Krizma Seller" then
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Merchants.KrizmaMerch.HumanoidRootPart.CFrame
Fluent:Notify({
    Title = "Teleport Notify",
    Content = "Teleported to " ..Mobbb,
    Duration = 1
})
elseif Mobbb == "Flair Seller" then
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Merchants.FlailMerchant.HumanoidRootPart.CFrame
Fluent:Notify({
    Title = "Teleport Notify",
    Content = "Teleported to " ..Mobbb,
    Duration = 1
})
elseif Mobbb == "Sword Seller" then
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Merchants.SwordMerchant.HumanoidRootPart.CFrame
Fluent:Notify({
    Title = "Teleport Notify",
    Content = "Teleported to " ..Mobbb,
    Duration = 1
})
elseif Mobbb == "Gun Seller" then
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Merchants.SniperMerchant.HumanoidRootPart.CFrame
Fluent:Notify({
    Title = "Teleport Notify",
    Content = "Teleported to " ..Mobbb,
    Duration = 1
})
elseif Mobbb == "Merlin" then
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Merchants.QuestFishMerchant.HumanoidRootPart.CFrame
Fluent:Notify({
    Title = "Teleport Notify",
    Content = "Teleported to " ..Mobbb,
    Duration = 1
})
elseif Mobbb == "Emotes Teacher" then
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Merchants.EmoteMerchant.HumanoidRootPart.CFrame
Fluent:Notify({
    Title = "Teleport Notify",
    Content = "Teleported to " ..Mobbb,
    Duration = 1
})
elseif Mobbb == "Lucy (Affinity)" then
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Merchants.AffinityMerchant.HumanoidRootPart.CFrame
Fluent:Notify({
    Title = "Teleport Notify",
    Content = "Teleported to " ..Mobbb,
    Duration = 1
})
elseif Mobbb == "Chef" then
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Merchants.FishMerchant.HumanoidRootPart.CFrame
Fluent:Notify({
    Title = "Teleport Notify",
    Content = "Teleported to " ..Mobbb,
    Duration = 1
})
elseif Mobbb == "Expertise Giver" then
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Merchants.ExpertiseMerchant.Head.CFrame
Fluent:Notify({
    Title = "Teleport Notify",
    Content = "Teleported to " ..Mobbb,
    Duration = 1
})
end
end)





local InstantWeapon = Tabs.Main:AddSection("Instant Weapon")
local YoruSpeed = Tabs.Main:AddSlider("Slideryoru", {
    Title = "Yoru Speed",
    Description = "Change this for adjusting Yoru's speed",
    Default = 50,
    Min = 1,
    Max = 200,
    Rounding = 0,
    Callback = function(to)
            Speeds = to
        end
    })

local Toggle = Tabs.Main:AddToggle("MyToggle", {Title = "Yoru Spamming", Default = false })
    Toggle:OnChanged(function()
while Options.MyToggle.Value do
wait()
    local Players = game:GetService("Players")
    local Plr = Players.LocalPlayer
    local Character = Plr.Character
    local Yoru = Character:FindFirstChild("Yoru")
    local Environment
wait()
pcall(function()
for i,v in pairs(getconnections(Yoru["RequestAnimation"].OnClientEvent)) do 
    Environment = getsenv(Yoru["AnimationController"])
end
    wait()
for i = 1, Speeds do
Yoru["RequestAnimation"]:FireServer(Environment.PlaceId)
end
end)
wait()
end
end)
Options.MyToggle:SetValue(false)

local CestusSpeed = Tabs.Main:AddSlider("Slidercestus", {
    Title = "Cestus Speed",
    Description = "Change this for adjusting Seastone Cestus's speed",
    Default = 50,
    Min = 1,
    Max = 200,
    Rounding = 0,
    Callback = function(too)
            Speedss = too
        end
    })

local CestusToggle = Tabs.Main:AddToggle("CestussToggle", {Title = "Cestus Spamming", Default = false })
    CestusToggle:OnChanged(function()
while Options.CestussToggle.Value do
wait()
    local Players = game:GetService("Players")
    local Plr = Players.LocalPlayer
    local Character = Plr.Character
    local Cestus = Character:FindFirstChild("Seastone Cestus")
    local Environment
wait()
pcall(function()
for i,v in pairs(getconnections(Cestus["RequestAnimation"].OnClientEvent)) do 
    Environment = getsenv(Cestus["AnimationController"])
end
    wait()
for i = 1, Speedss do
Cestus["RequestAnimation"]:FireServer(Environment.PlaceId)
end
end)
wait()
end
end)
Options.CestussToggle:SetValue(false)


local HakiSection = Tabs.Main:AddSection("Haki Farming")
local gethaki = Tabs.Main:AddToggle("hakiget", {Title = "Auto get haki (1k lvl)", Default = false })
gethaki:OnChanged(function()
while Options.hakiget.Value do wait()
pcall(function()
workspace:WaitForChild("Merchants"):WaitForChild("QuestHakiMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer()
wait(2)
end)
end
end)
Options.hakiget:SetValue(false)


local drainhaki = Tabs.Main:AddToggle("hakidrain", {Title = "Drain Haki", Default = false })
drainhaki:OnChanged(function()
function hakiauto()
       local Players = game:GetService("Players")
    local cache = {}
    function lol(name)
        if cache[name] then return cache[name] end
        local player = Players:FindFirstChild(name)
        if player then
            cache[name] = player.UserId
            return player.UserId
        end 
    
        local id
        pcall(function ()
            id = Players:lol(name)
        end)
        cache[name] = id
        return id
    end
    local ehh = game.Players.LocalPlayer.Name
    local Final = lol(ehh)
    
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    
    
    
    end
    while Options.hakidrain.Value do wait()
        hakiauto()
end
end)
local HakiSection2 = Tabs.Main:AddSection("Auto Haki Farming")
local hakitargett = Tabs.Main:AddSlider("Sliderhaki", {
    Title = "Haki Target (%)",
    Description = "Change this for adjusting haki's target",
    Default = 55,
    Min = 1,
    Max = 90,
    Rounding = 0,
    Callback = function(gmm)
            hakitarget = gmm
        end
    })

local hakispeedt = Tabs.Main:AddSlider("Slidertargethaki", {
    Title = "Haki Speed",
    Description = "Change this for adjusting haki's speed",
    Default = 20,
    Min = 1,
    Max = 50,
    Rounding = 0,
    Callback = function(gttmm)
            hakispeed = gttmm
        end
    })

local farmhaki = Tabs.Main:AddToggle("hakifarm", {Title = "Auto Farm Haki", Default = false })
farmhaki:OnChanged(function()
local plrid = tostring(game.Players.LocalPlayer.UserId)
local plr = tostring(game.Players.LocalPlayer)
_G.concu = true
while _G.concu do wait()
local slv = game.workspace.UserData["User_"..plrid].Data.HakiLevel.Value
local sss = slv/100*hakitarget
local sll =  slv/100*90
if game.Workspace.UserData["User_"..plrid].HakiBar.Value > sss and Options.hakifarm.Value == true then
local Players = game:GetService("Players")
local cache = {}
function lol(name)
if cache[name] then
return cache[name] 
end
local player = Players:FindFirstChild(name)
if player then
cache[name] = player.UserId
return player.UserId
end 
    
local id
pcall(function ()
id = Players:lol(name)
end)
cache[name] = id
return id
end

local ehh = game.Players.LocalPlayer.Name
local Final = lol(ehh)
for i = 1, hakispeed do
    local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
    local args = {
        [1] = "On",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
end
elseif game.Workspace.UserData["User_"..plrid].HakiBar.Value <= sss and Options.hakifarm.Value == true then
        local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
repeat task.wait()
until game.Workspace.UserData["User_"..plrid].HakiBar.Value >= sll
_G.concu = true
elseif Options.hakifarm.Value == false then
_G.concu = false
        local args = {
        [1] = "Off",
        [2] = 1
    }
    
    workspace.UserData["User_"..Final].III:FireServer(unpack(args))
end
end
end)
Options.hakifarm:SetValue(false)

local HakiSection3 = Tabs.Main:AddSection("Advanced Haki Farming")

    Tabs.Main:AddButton({
        Title = "Farming Haki (Beta)",
        Description = "Click to farm, can click multi-time",
        Callback = function()
local x = game.Players.LocalPlayer.UserId
local haki = game:GetService("Workspace").UserData["User_"..x].Data.HakiLevel.Value

for i = 1,99999 do

while wait() do
local args = {
    [1] = "On",
    [2] = haki
}

workspace.UserData["User_"..x].III:FireServer(unpack(args))

wait()

local args = {
    [1] = "Off",
    [2] = haki
}

workspace.UserData["User_"..x].III:FireServer(unpack(args))
wait()
local args = {
    [1] = "On",
    [2] = haki
}

workspace.UserData["User_"..x].III:FireServer(unpack(args))

wait()
local args = {
    [1] = "Off",
    [2] = haki
}

workspace.UserData["User_"..x].III:FireServer(unpack(args))


wait()
local args = {
    [1] = "On",
    [2] = haki
}

workspace.UserData["User_"..x].III:FireServer(unpack(args))

wait()
local args = {
    [1] = "Off",
    [2] = haki
}

workspace.UserData["User_"..x].III:FireServer(unpack(args))
wait()
local args = {
    [1] = "On",
    [2] = haki
}

workspace.UserData["User_"..x].III:FireServer(unpack(args))
wait()
local args = {
    [1] = "Off",
    [2] = haki
}

workspace.UserData["User_"..x].III:FireServer(unpack(args))
local args = {
    [1] = "On",
    [2] = haki
}

workspace.UserData["User_"..x].III:FireServer(unpack(args))

wait()

local args = {
    [1] = "Off",
    [2] = haki
}

workspace.UserData["User_"..x].III:FireServer(unpack(args))
wait()
local args = {
    [1] = "On",
    [2] = haki
}

workspace.UserData["User_"..x].III:FireServer(unpack(args))

wait()

local args = {
    [1] = "Off",
    [2] = haki
}

workspace.UserData["User_"..x].III:FireServer(unpack(args))
wait()
local args = {
    [1] = "On",
    [2] = haki
}

workspace.UserData["User_"..x].III:FireServer(unpack(args))

wait()

local args = {
    [1] = "Off",
    [2] = haki
}

workspace.UserData["User_"..x].III:FireServer(unpack(args))
wait()
local args = {
    [1] = "On",
    [2] = haki
}

workspace.UserData["User_"..x].III:FireServer(unpack(args))

wait()

local args = {
    [1] = "Off",
    [2] = haki
}

workspace.UserData["User_"..x].III:FireServer(unpack(args))
wait()
local args = {
    [1] = "Off",
    [2] = haki
}

workspace.UserData["User_"..x].III:FireServer(unpack(args))
wait() 
local args = {
    [1] = "Off",
    [2] = haki
}

workspace.UserData["User_"..x].III:FireServer(unpack(args))
wait() 
local args = {
    [1] = "On",
    [2] = haki
}

workspace.UserData["User_"..x].III:FireServer(unpack(args))

wait()

local args = {
    [1] = "Off",
    [2] = haki
}

workspace.UserData["User_"..x].III:FireServer(unpack(args))
wait()
local args = {
    [1] = "On",
    [2] = haki
}

workspace.UserData["User_"..x].III:FireServer(unpack(args))

wait()

local args = {
    [1] = "Off",
    [2] = haki
}

workspace.UserData["User_"..x].III:FireServer(unpack(args))
wait()
local args = {
    [1] = "Off",
    [2] = haki
}

workspace.UserData["User_"..x].III:FireServer(unpack(args))
wait()
local args = {
    [1] = "Off",
    [2] = haki
}

workspace.UserData["User_"..x].III:FireServer(unpack(args))
wait()
local args = {
    [1] = "Off",
    [2] = haki
}

workspace.UserData["User_"..x].III:FireServer(unpack(args))
end
end
        end
    })

local mgfrrr = Tabs.Server:AddSection("Boost")
    Tabs.Server:AddButton({
        Title = "Low-Graphic Mode",
        Description = "Use to reduce lag",
        Callback = function()
            Window:Dialog({
                Title = "Low-graphic Mode",
                Content = "Do you want to use?",
                Buttons = {
                    {
                        Title = "OK",
                        Callback = function()
workspace:FindFirstChildOfClass('Terrain').WaterWaveSize = 0
	workspace:FindFirstChildOfClass('Terrain').WaterWaveSpeed = 0
	workspace:FindFirstChildOfClass('Terrain').WaterReflectance = 0
	workspace:FindFirstChildOfClass('Terrain').WaterTransparency = 0
	game:GetService("Lighting").GlobalShadows = false
	game:GetService("Lighting").FogEnd = 9e9
	settings().Rendering.QualityLevel = 1
	for i,v in pairs(game:GetDescendants()) do
		if v:IsA("Part") or v:IsA("UnionOperation") or v:IsA("MeshPart") or v:IsA("CornerWedgePart") or v:IsA("TrussPart") then
			v.Material = "Plastic"
			v.Reflectance = 0
		elseif v:IsA("Decal") then
			v.Transparency = 1
		elseif v:IsA("ParticleEmitter") or v:IsA("Trail") then
			v.Lifetime = NumberRange.new(0)
		elseif v:IsA("Explosion") then
			v.BlastPressure = 1
			v.BlastRadius = 1
		end
	end
	for i,v in pairs(game:GetService("Lighting"):GetDescendants()) do
		if v:IsA("BlurEffect") or v:IsA("SunRaysEffect") or v:IsA("ColorCorrectionEffect") or v:IsA("BloomEffect") or v:IsA("DepthOfFieldEffect") then
			v.Enabled = false
		end
	end
	workspace.DescendantAdded:Connect(function(child)
		coroutine.wrap(function()
			if child:IsA('ForceField') then
				game:GetService('RunService').Heartbeat:Wait()
				child:Destroy()
			elseif child:IsA('Sparkles') then
				game:GetService('RunService').Heartbeat:Wait()
				child:Destroy()
			elseif child:IsA('Smoke') or child:IsA('Fire') then
				game:GetService('RunService').Heartbeat:Wait()
				child:Destroy()
			end
		end)()
	end)                        end
                    },
                    {
                        Title = "Cancel",
                        Callback = function()
                        end
                    }
                }
            })
        end
    })

local mgfrrr2 = Tabs.Server:AddSection("Rejoin/Hop")
    Tabs.Server:AddButton({
        Title = "Rejoin Server",
        Description = "Rejoin the current server",
        Callback = function()
            Window:Dialog({
                Title = "Rejoin Server",
                Content = "Do you want to use?",
                Buttons = {
                    {
                        Title = "OK",
                        Callback = function()
            local ts = game:GetService("TeleportService")
            local p = game:GetService("Players").LocalPlayer
            ts:Teleport(game.PlaceId, p)            
end
                    },
                    {
                        Title = "Cancel",
                        Callback = function()
                        end
                    }
                }
            })
        end
    })

   Tabs.Server:AddButton({
        Title = "Low-Server Hop",
        Description = "Join the different server (fewer player)",
        Callback = function()
            Window:Dialog({
                Title = "Server Hop",
                Content = "Do you want to use?",
                Buttons = {
                    {
                        Title = "OK",
                        Callback = function()
            local PlaceID = game.PlaceId
            local AllIDs = {}
            local foundAnything = ""
            local actualHour = os.date("!*t").hour
            local Deleted = false
            function TPReturner()
                local Site;
                if foundAnything == "" then
                    Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
                else
                    Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
                end
                local ID = ""
                if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
                    foundAnything = Site.nextPageCursor
                end
                local num = 0;
                for i,v in pairs(Site.data) do
                    local Possible = true
                    ID = tostring(v.id)
                    if tonumber(v.maxPlayers) > tonumber(v.playing) then
                        for _,Existing in pairs(AllIDs) do
                            if num ~= 0 then
                                if ID == tostring(Existing) then
                                    Possible = false
                                end
                            else
                                if tonumber(actualHour) ~= tonumber(Existing) then
                                    local delFile = pcall(function()
                                        -- delfile("NotSameServers.json")
                                        AllIDs = {}
                                        table.insert(AllIDs, actualHour)
                                    end)
                                end
                            end
                            num = num + 1
                        end
                        if Possible == true then
                            table.insert(AllIDs, ID)
                            wait()
                            pcall(function()
                                -- writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
                                wait()
                                game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID, game.Players.LocalPlayer)
                            end)
                            wait(.1)
                        end
                    end
                end
            end
            function Teleport() 
                while wait() do
                    pcall(function()
                        TPReturner()
                        if foundAnything ~= "" then
                            TPReturner()
                        end
                    end)
                end
            end
            Teleport()         
end
                    },
                    {
                        Title = "Cancel",
                        Callback = function()
                        end
                    }
                }
            })
        end
    })

local af1 = Tabs.Affinity:AddSection("Roll Affinity 1st Devil Fruit")

local Lucyfirst = Tabs.Affinity:AddSlider("Sliderfirstfruit", {
    Title = "1st Devil Fruit Point",
    Description = "Choose the point of affinity",
    Default = 1.9,
    Min = 1,
    Max = 2,
    Rounding = 1,
    Callback = function(treo)
            _G.trqpwo = treo
        end
    })

     local wrrrrr = Tabs.Affinity:AddDropdown("MultiDropdown", {
        Title = "Lock Affinity (DF1)",
        Description = "You can choose affinities to lock.",
        Values = {"Defense", "Melee", "Sniper", "Sword"},
        Multi = true,
        Default = {""},
    })

    wrrrrr:SetValue({
        Defense = false,
        Melee = false,
        Sniper = false,
	Sword = false
    })

    wrrrrr:OnChanged(function(Valuer)
        local Values = {"None"}
_G.keepdef = false
_G.keepmelee = false
_G.keepsnip = false
_G.keepsword = false
        for Valuer, State in next, Valuer do
            table.insert(Values, Valuer)
        end
			for _, n in pairs(Values) do
if string.find(n, "Defense") then
_G.keepdef = true
end
if string.find(n, "Melee") then
_G.keepmelee = true
end
if string.find(n, "Sniper") then
_G.keepsnip = true
end
if string.find(n, "Sword") then
_G.keepsword = true
end
			end
end)


    local wwwwww = Tabs.Affinity:AddDropdown("MultiDropdown", {
        Title = "Target Affinity (DF1)",
        Description = "You can choose the target affinity.",
        Values = {"Defense", "Melee", "Sniper", "Sword"},
        Multi = true,
        Default = {""},
    })

    wwwwww:SetValue({
        Defense = false,
        Melee = false,
        Sniper = false,
	Sword = false
    })

    wwwwww:OnChanged(function(Valuerr)
        local Valuess = {"None"}
_G.targetdef = false
_G.targetmelee = false
_G.targetsnip = false
_G.targetsword = false
        for Valuerr, State in next, Valuerr do
            table.insert(Valuess, Valuerr)
        end
			for _, q in pairs(Valuess) do
if string.find(q, "Defense") then
_G.targetdef = true
end
if string.find(q, "Melee") then
_G.targetmelee = true
end
if string.find(q, "Sniper") then
_G.targetsnip = true
end
if string.find(q, "Sword") then
_G.targetsword = true
end
			end
end)

local ret = Tabs.Affinity:AddDropdown("Dropdown", {
        Title = "Budget Type",
        Values = {"Cash", "Gems"},
        Multi = false,
        Default = 1,
    })

    ret:SetValue("Cash")

    ret:OnChanged(function(Valuezx)
_G.budget = Valuezx
end)

local DF11Toggle = Tabs.Affinity:AddToggle("DF1Toggle", {Title = "Auto Roll Affinity (DF1)", Default = false })
    DF11Toggle:OnChanged(function()

if _G.targetsword == false and _G.targetdef == false and _G.targetmelee == false and _G.targetsnip == false then
Fluent:Notify({
    Title = "AUTO-ROLL AFFINITY (DF1) NOTIFY",
    Content = "Choose target(s) before spin",
    Duration = 8
})
end

while Options.DF1Toggle.Value do wait()
pcall(function()
if Options.DF1Toggle.Value == true then
_G.quayfirstdf = true
else
_G.quayfirstdf = false
end
local plrid = tostring(game.Players.LocalPlayer.UserId)
local plr = tostring(game.Players.LocalPlayer)
if _G.targetdef == true and _G.targetsnip == false and _G.targetmelee == false and _G.targetsword == false and workspace.UserData["User_"..plrid].Data.DFT1Defense.Value < _G.trqpwo then
_G.defspin = true
else
_G.defspin = false
end
if _G.targetmelee == true and _G.targetdef == false and _G.targetsword == false and _G.targetsnip == false and workspace.UserData["User_"..plrid].Data.DFT1Melee.Value < _G.trqpwo then
_G.meleespin = true
else
_G.meleespin = false
end
if _G.targetsnip == true and _G.targetdef == false and _G.targetmelee == false and _G.targetsword == false and workspace.UserData["User_"..plrid].Data.DFT1Sniper.Value < _G.trqpwo then
_G.sniperspin = true

else
_G.sniperspin = false
end
if _G.targetsword == true and _G.targetdef == false and _G.targetmelee == false and _G.targetsnip == false and workspace.UserData["User_"..plrid].Data.DFT1Sword.Value < _G.trqpwo then
_G.swordspin = true

else
_G.swordspin = false
end
if _G.targetsword == false and _G.targetdef == true and _G.targetmelee == true and _G.targetsnip == false and workspace.UserData["User_"..plrid].Data.DFT1Defense.Value < _G.trqpwo and workspace.UserData["User_"..plrid].Data.DFT1Melee.Value < _G.trqpwo then
_G.defmeleespin = true

else
_G.defmeleespin = false
end
if _G.targetsword == false and _G.targetdef == true and _G.targetmelee == false and _G.targetsnip == true and workspace.UserData["User_"..plrid].Data.DFT1Defense.Value < _G.trqpwo and workspace.UserData["User_"..plrid].Data.DFT1Sniper.Value < _G.trqpwo then
_G.defsnipspin = true
else
_G.defsnipspin = false

end
if _G.targetsword == true and _G.targetdef == true and _G.targetmelee == false and _G.targetsnip == false and workspace.UserData["User_"..plrid].Data.DFT1Defense.Value < _G.trqpwo and workspace.UserData["User_"..plrid].Data.DFT1Sword.Value < _G.trqpwo then
_G.defswordspin = true
else
_G.defswordspin = false
end
if _G.targetsword == false and _G.targetdef == false and _G.targetmelee == true and _G.targetsnip == true and workspace.UserData["User_"..plrid].Data.DFT1Melee.Value < _G.trqpwo and workspace.UserData["User_"..plrid].Data.DFT1Sniper.Value < _G.trqpwo then
_G.meleesnipspin = true
else
_G.meleesnipspin = false
end
if _G.targetsword == true and _G.targetdef == false and _G.targetmelee == true and _G.targetsnip == false and workspace.UserData["User_"..plrid].Data.DFT1Melee.Value < _G.trqpwo and workspace.UserData["User_"..plrid].Data.DFT1Sword.Value < _G.trqpwo then
_G.meleeswordspin = true
else
_G.meleeswordspin = false
end
if _G.targetsword == true and _G.targetdef == false and _G.targetmelee == false and _G.targetsnip == true and workspace.UserData["User_"..plrid].Data.DFT1Sniper.Value < _G.trqpwo and workspace.UserData["User_"..plrid].Data.DFT1Sword.Value < _G.trqpwo then
_G.swordsnipspin = true
else
_G.swordsnipspin = false
end
if _G.targetsword == false and _G.targetdef == true and _G.targetmelee == true and _G.targetsnip == true and workspace.UserData["User_"..plrid].Data.DFT1Sniper.Value < _G.trqpwo and workspace.UserData["User_"..plrid].Data.DFT1Defense.Value < _G.trqpwo and workspace.UserData["User_"..plrid].Data.DFT1Melee.Value < _G.trqpwo then
_G.defmeleesnipspin = true
else
_G.defmeleesnipspin = false
end
if _G.targetsword == true and _G.targetdef == true and _G.targetmelee == true and _G.targetsnip == false and workspace.UserData["User_"..plrid].Data.DFT1Sword.Value < _G.trqpwo and workspace.UserData["User_"..plrid].Data.DFT1Defense.Value < _G.trqpwo and workspace.UserData["User_"..plrid].Data.DFT1Melee.Value < _G.trqpwo then
_G.defmeleeswordspin = true
else
_G.defmeleeswordspin = false
end
if _G.targetsword == true and _G.targetdef == false and _G.targetmelee == true and _G.targetsnip == true and workspace.UserData["User_"..plrid].Data.DFT1Sword.Value < _G.trqpwo and workspace.UserData["User_"..plrid].Data.DFT1Sniper.Value < _G.trqpwo and workspace.UserData["User_"..plrid].Data.DFT1Melee.Value < _G.trqpwo then
_G.meleesnipswordspin = true
else
_G.meleesnipswordspin = false
end
if _G.targetsword == true and _G.targetdef == true and _G.targetmelee == false and _G.targetsnip == true and workspace.UserData["User_"..plrid].Data.DFT1Sword.Value < _G.trqpwo and workspace.UserData["User_"..plrid].Data.DFT1Sniper.Value < _G.trqpwo and workspace.UserData["User_"..plrid].Data.DFT1Defense.Value < _G.trqpwo then
_G.defswordsnip = true
else
_G.defswordsnip = false
end
if _G.targetsword == true and _G.targetdef == true and _G.targetmelee == true and _G.targetsnip == true and workspace.UserData["User_"..plrid].Data.DFT1Sword.Value < _G.trqpwo and workspace.UserData["User_"..plrid].Data.DFT1Sniper.Value < _G.trqpwo and workspace.UserData["User_"..plrid].Data.DFT1Melee.Value < _G.trqpwo and workspace.UserData["User_"..plrid].Data.DFT1Defense.Value < _G.trqpwo then
_G.allspin = true
else
_G.allspin = false
end

end)
end
end)
Options.DF1Toggle:SetValue(false)

            spawn(function()
            while wait() do
                if _G.quayfirstdf then
                    pcall(function()
if _G.defswordsnip == true then
local args = {
    [1] = "DFT1",
    [2] = _G.keepdef,
    [3] = _G.keepmelee,
    [4] = _G.keepsnip,
    [5] = _G.keepsword,
    [6] = _G.budget
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))

elseif _G.allspin == true then
local args = {
    [1] = "DFT1",
    [2] = _G.keepdef,
    [3] = _G.keepmelee,
    [4] = _G.keepsnip,
    [5] = _G.keepsword,
    [6] = _G.budget
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))

elseif _G.meleesnipswordspin == true then
local args = {
    [1] = "DFT1",
    [2] = _G.keepdef,
    [3] = _G.keepmelee,
    [4] = _G.keepsnip,
    [5] = _G.keepsword,
    [6] = _G.budget
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))
elseif _G.defmeleeswordspin == true then
local args = {
    [1] = "DFT1",
    [2] = _G.keepdef,
    [3] = _G.keepmelee,
    [4] = _G.keepsnip,
    [5] = _G.keepsword,
    [6] = _G.budget
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))

elseif _G.defmeleesnipspin == true then
local args = {
    [1] = "DFT1",
    [2] = _G.keepdef,
    [3] = _G.keepmelee,
    [4] = _G.keepsnip,
    [5] = _G.keepsword,
    [6] = _G.budget
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))

elseif _G.swordsnipspin == true then
local args = {
    [1] = "DFT1",
    [2] = _G.keepdef,
    [3] = _G.keepmelee,
    [4] = _G.keepsnip,
    [5] = _G.keepsword,
    [6] = _G.budget
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))
elseif _G.meleeswordspin == true then
local args = {
    [1] = "DFT1",
    [2] = _G.keepdef,
    [3] = _G.keepmelee,
    [4] = _G.keepsnip,
    [5] = _G.keepsword,
    [6] = _G.budget
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))
elseif _G.meleesnipspin == true then
local args = {
    [1] = "DFT1",
    [2] = _G.keepdef,
    [3] = _G.keepmelee,
    [4] = _G.keepsnip,
    [5] = _G.keepsword,
    [6] = _G.budget
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))
elseif _G.defswordspin == true then
local args = {
    [1] = "DFT1",
    [2] = _G.keepdef,
    [3] = _G.keepmelee,
    [4] = _G.keepsnip,
    [5] = _G.keepsword,
    [6] = _G.budget
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))
elseif _G.defsnipspin == true then
local args = {
    [1] = "DFT1",
    [2] = _G.keepdef,
    [3] = _G.keepmelee,
    [4] = _G.keepsnip,
    [5] = _G.keepsword,
    [6] = _G.budget
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))
elseif _G.defmeleespin == true then
local args = {
    [1] = "DFT1",
    [2] = _G.keepdef,
    [3] = _G.keepmelee,
    [4] = _G.keepsnip,
    [5] = _G.keepsword,
    [6] = _G.budget
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))
elseif _G.swordspin == true then
local args = {
    [1] = "DFT1",
    [2] = _G.keepdef,
    [3] = _G.keepmelee,
    [4] = _G.keepsnip,
    [5] = _G.keepsword,
    [6] = _G.budget
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))
elseif _G.sniperspin == true then
local args = {
    [1] = "DFT1",
    [2] = _G.keepdef,
    [3] = _G.keepmelee,
    [4] = _G.keepsnip,
    [5] = _G.keepsword,
    [6] = _G.budget
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))
elseif _G.meleespin == true then
local args = {
    [1] = "DFT1",
    [2] = _G.keepdef,
    [3] = _G.keepmelee,
    [4] = _G.keepsnip,
    [5] = _G.keepsword,
    [6] = _G.budget
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))
elseif _G.defspin == true then
local args = {
    [1] = "DFT1",
    [2] = _G.keepdef,
    [3] = _G.keepmelee,
    [4] = _G.keepsnip,
    [5] = _G.keepsword,
    [6] = _G.budget
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))
end
wait(12)
                    end)
                end
            end
            end)


local af2 = Tabs.Affinity:AddSection("Roll Affinity 2st Devil Fruit")

local Lucysecond = Tabs.Affinity:AddSlider("Slidersecondfruit", {
    Title = "2nd Devil Fruit Point",
    Description = "Choose the point of affinity",
    Default = 1.9,
    Min = 1,
    Max = 2,
    Rounding = 1,
    Callback = function(treot)
            _G.trqpwo2 = treot
        end
    })

     local wrrrrr2 = Tabs.Affinity:AddDropdown("MultiDropdown", {
        Title = "Lock Affinity (DF2)",
        Description = "You can choose affinities to lock.",
        Values = {"Defense", "Melee", "Sniper", "Sword"},
        Multi = true,
        Default = {""},
    })

    wrrrrr2:SetValue({
        Defense = false,
        Melee = false,
        Sniper = false,
	Sword = false
    })

    wrrrrr2:OnChanged(function(Valuer2)
        local Values2 = {"None"}
_G.keepdef2 = false
_G.keepmelee2 = false
_G.keepsnip2 = false
_G.keepsword2 = false
        for Valuer2, State in next, Valuer2 do
            table.insert(Values2, Valuer2)
        end
			for _, m in pairs(Values2) do
if string.find(m, "Defense") then
_G.keepdef2 = true
end
if string.find(m, "Melee") then
_G.keepmelee2 = true
end
if string.find(m, "Sniper") then
_G.keepsnip2 = true
end
if string.find(m, "Sword") then
_G.keepsword2 = true
end
			end
end)


    local wwwwww2 = Tabs.Affinity:AddDropdown("MultiDropdown", {
        Title = "Target Affinity (DF2)",
        Description = "You can choose the target affinity.",
        Values = {"Defense", "Melee", "Sniper", "Sword"},
        Multi = true,
        Default = {""},
    })

    wwwwww2:SetValue({
        Defense = false,
        Melee = false,
        Sniper = false,
	Sword = false
    })

    wwwwww2:OnChanged(function(Valuerr2)
        local Valuess2 = {"None"}
_G.targetdef2 = false
_G.targetmelee2 = false
_G.targetsnip2 = false
_G.targetsword2 = false
        for Valuerr2, State in next, Valuerr2 do
            table.insert(Valuess2, Valuerr2)
        end
			for _, r in pairs(Valuess2) do
if string.find(r, "Defense") then
_G.targetdef2 = true
end
if string.find(r, "Melee") then
_G.targetmelee2 = true
end
if string.find(r, "Sniper") then
_G.targetsnip2 = true
end
if string.find(r, "Sword") then
_G.targetsword2 = true
end
			end
end)

local ret2 = Tabs.Affinity:AddDropdown("Dropdown", {
        Title = "Budget Type",
        Values = {"Cash", "Gems"},
        Multi = false,
        Default = 1,
    })

    ret2:SetValue("Cash")

    ret2:OnChanged(function(Valuezx2)
_G.budget2 = Valuezx2
end)

local DF22Toggle = Tabs.Affinity:AddToggle("DF2Toggle", {Title = "Auto Roll Affinity (DF2)", Default = false })
    DF22Toggle:OnChanged(function()

if _G.targetsword2 == false and _G.targetdef2 == false and _G.targetmelee2 == false and _G.targetsnip2 == false then
Fluent:Notify({
    Title = "AUTO-ROLL AFFINITY (DF2) NOTIFY",
    Content = "Choose target(s) before spin",
    Duration = 8
})
end

while Options.DF2Toggle.Value do wait()
pcall(function()
if Options.DF2Toggle.Value == true then
_G.quayfirstdf2 = true
else
_G.quayfirstdf2 = false
end
local plrid = tostring(game.Players.LocalPlayer.UserId)
local plr = tostring(game.Players.LocalPlayer)
if _G.targetdef2 == true and _G.targetsnip2 == false and _G.targetmelee2 == false and _G.targetsword2 == false and workspace.UserData["User_"..plrid].Data.DFT2Defense.Value < _G.trqpwo2 then
_G.defspin2 = true
else
_G.defspin2 = false
end
if _G.targetmelee2 == true and _G.targetdef2 == false and _G.targetsword2 == false and _G.targetsnip2 == false and workspace.UserData["User_"..plrid].Data.DFT2Melee.Value < _G.trqpwo2 then
_G.meleespin2 = true
else
_G.meleespin2 = false
end
if _G.targetsnip2 == true and _G.targetdef2 == false and _G.targetmelee2 == false and _G.targetsword2 == false and workspace.UserData["User_"..plrid].Data.DFT2Sniper.Value < _G.trqpwo2 then
_G.sniperspin2 = true

else
_G.sniperspin2 = false
end
if _G.targetsword2 == true and _G.targetdef2 == false and _G.targetmelee2 == false and _G.targetsnip2 == false and workspace.UserData["User_"..plrid].Data.DFT2Sword.Value < _G.trqpwo2 then
_G.swordspin2 = true

else
_G.swordspin2 = false
end
if _G.targetsword2 == false and _G.targetdef2 == true and _G.targetmelee2 == true and _G.targetsnip2 == false and workspace.UserData["User_"..plrid].Data.DFT2Defense.Value < _G.trqpwo2 and workspace.UserData["User_"..plrid].Data.DFT2Melee.Value < _G.trqpwo2 then
_G.defmeleespin2 = true

else
_G.defmeleespin2 = false
end
if _G.targetsword2 == false and _G.targetdef2 == true and _G.targetmelee2 == false and _G.targetsnip2 == true and workspace.UserData["User_"..plrid].Data.DFT2Defense.Value < _G.trqpwo2 and workspace.UserData["User_"..plrid].Data.DFT2Sniper.Value < _G.trqpwo2 then
_G.defsnipspin2 = true
else
_G.defsnipspin2 = false

end
if _G.targetsword2 == true and _G.targetdef2 == true and _G.targetmelee2 == false and _G.targetsnip2 == false and workspace.UserData["User_"..plrid].Data.DFT2Defense.Value < _G.trqpwo2 and workspace.UserData["User_"..plrid].Data.DFT2Sword.Value < _G.trqpwo2 then
_G.defswordspin2 = true
else
_G.defswordspin2 = false
end
if _G.targetsword2 == false and _G.targetdef2 == false and _G.targetmelee2 == true and _G.targetsnip2 == true and workspace.UserData["User_"..plrid].Data.DFT2Melee.Value < _G.trqpwo2 and workspace.UserData["User_"..plrid].Data.DFT2Sniper.Value < _G.trqpwo2 then
_G.meleesnipspin2 = true
else
_G.meleesnipspin2 = false
end
if _G.targetsword2 == true and _G.targetdef2 == false and _G.targetmelee2 == true and _G.targetsnip2 == false and workspace.UserData["User_"..plrid].Data.DFT2Melee.Value < _G.trqpwo2 and workspace.UserData["User_"..plrid].Data.DFT2Sword.Value < _G.trqpwo2 then
_G.meleeswordspin2 = true
else
_G.meleeswordspin2 = false
end
if _G.targetsword2 == true and _G.targetdef2 == false and _G.targetmelee2 == false and _G.targetsnip2 == true and workspace.UserData["User_"..plrid].Data.DFT2Sniper.Value < _G.trqpwo2 and workspace.UserData["User_"..plrid].Data.DFT2Sword.Value < _G.trqpwo2 then
_G.swordsnipspin2 = true
else
_G.swordsnipspin2 = false
end
if _G.targetsword2 == false and _G.targetdef2 == true and _G.targetmelee2 == true and _G.targetsnip2 == true and workspace.UserData["User_"..plrid].Data.DFT2Sniper.Value < _G.trqpwo2 and workspace.UserData["User_"..plrid].Data.DFT2Defense.Value < _G.trqpwo2 and workspace.UserData["User_"..plrid].Data.DFT2Melee.Value < _G.trqpwo2 then
_G.defmeleesnipspin2 = true
else
_G.defmeleesnipspin2 = false
end
if _G.targetsword2 == true and _G.targetdef2 == true and _G.targetmelee2 == true and _G.targetsnip2 == false and workspace.UserData["User_"..plrid].Data.DFT2Sword.Value < _G.trqpwo2 and workspace.UserData["User_"..plrid].Data.DFT2Defense.Value < _G.trqpwo2 and workspace.UserData["User_"..plrid].Data.DFT2Melee.Value < _G.trqpwo2 then
_G.defmeleeswordspin2 = true
else
_G.defmeleeswordspin2 = false
end
if _G.targetsword2 == true and _G.targetdef2 == false and _G.targetmelee2 == true and _G.targetsnip2 == true and workspace.UserData["User_"..plrid].Data.DFT2Sword.Value < _G.trqpwo2 and workspace.UserData["User_"..plrid].Data.DFT2Sniper.Value < _G.trqpwo2 and workspace.UserData["User_"..plrid].Data.DFT2Melee.Value < _G.trqpwo2 then
_G.meleesnipswordspin2 = true
else
_G.meleesnipswordspin2 = false
end
if _G.targetsword2 == true and _G.targetdef2 == true and _G.targetmelee2 == false and _G.targetsnip2 == true and workspace.UserData["User_"..plrid].Data.DFT2Sword.Value < _G.trqpwo2 and workspace.UserData["User_"..plrid].Data.DFT2Sniper.Value < _G.trqpwo2 and workspace.UserData["User_"..plrid].Data.DFT2Defense.Value < _G.trqpwo2 then
_G.defswordsnip2 = true
else
_G.defswordsnip2 = false
end
if _G.targetsword2 == true and _G.targetdef2 == true and _G.targetmelee2 == true and _G.targetsnip2 == true and workspace.UserData["User_"..plrid].Data.DFT2Sword.Value < _G.trqpwo2 and workspace.UserData["User_"..plrid].Data.DFT2Sniper.Value < _G.trqpwo2 and workspace.UserData["User_"..plrid].Data.DFT2Melee.Value < _G.trqpwo2 and workspace.UserData["User_"..plrid].Data.DFT2Defense.Value < _G.trqpwo2 then
_G.allspin2 = true
else
_G.allspin2 = false
end

end)
end
end)
Options.DF2Toggle:SetValue(false)

            spawn(function()
            while wait() do
                if _G.quayfirstdf2 then
                    pcall(function()
if _G.defswordsnip2 == true then
local args = {
    [1] = "DFT2",
    [2] = _G.keepdef2,
    [3] = _G.keepmelee2,
    [4] = _G.keepsnip2,
    [5] = _G.keepsword2,
    [6] = _G.budget2
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))

elseif _G.allspin2 == true then
local args = {
    [1] = "DFT2",
    [2] = _G.keepdef2,
    [3] = _G.keepmelee2,
    [4] = _G.keepsnip2,
    [5] = _G.keepsword2,
    [6] = _G.budget2
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))

elseif _G.meleesnipswordspin2 == true then
local args = {
    [1] = "DFT2",
    [2] = _G.keepdef2,
    [3] = _G.keepmelee2,
    [4] = _G.keepsnip2,
    [5] = _G.keepsword2,
    [6] = _G.budget2
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))
elseif _G.defmeleeswordspin2 == true then
local args = {
    [1] = "DFT2",
    [2] = _G.keepdef2,
    [3] = _G.keepmelee2,
    [4] = _G.keepsnip2,
    [5] = _G.keepsword2,
    [6] = _G.budget2
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))

elseif _G.defmeleesnipspin2 == true then
local args = {
    [1] = "DFT2",
    [2] = _G.keepdef2,
    [3] = _G.keepmelee2,
    [4] = _G.keepsnip2,
    [5] = _G.keepsword2,
    [6] = _G.budget2
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))

elseif _G.swordsnipspin2 == true then
local args = {
    [1] = "DFT2",
    [2] = _G.keepdef2,
    [3] = _G.keepmelee2,
    [4] = _G.keepsnip2,
    [5] = _G.keepsword2,
    [6] = _G.budget2
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))
elseif _G.meleeswordspin2 == true then
local args = {
    [1] = "DFT2",
    [2] = _G.keepdef2,
    [3] = _G.keepmelee2,
    [4] = _G.keepsnip2,
    [5] = _G.keepsword2,
    [6] = _G.budget2
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))
elseif _G.meleesnipspin2 == true then
local args = {
    [1] = "DFT2",
    [2] = _G.keepdef2,
    [3] = _G.keepmelee2,
    [4] = _G.keepsnip2,
    [5] = _G.keepsword2,
    [6] = _G.budget2
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))
elseif _G.defswordspin2 == true then
local args = {
    [1] = "DFT2",
    [2] = _G.keepdef2,
    [3] = _G.keepmelee2,
    [4] = _G.keepsnip2,
    [5] = _G.keepsword2,
    [6] = _G.budget2
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))
elseif _G.defsnipspin2 == true then
local args = {
    [1] = "DFT2",
    [2] = _G.keepdef2,
    [3] = _G.keepmelee2,
    [4] = _G.keepsnip2,
    [5] = _G.keepsword2,
    [6] = _G.budget2
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))
elseif _G.defmeleespin2 == true then
local args = {
    [1] = "DFT2",
    [2] = _G.keepdef2,
    [3] = _G.keepmelee2,
    [4] = _G.keepsnip2,
    [5] = _G.keepsword2,
    [6] = _G.budget2
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))
elseif _G.swordspin2 == true then
local args = {
    [1] = "DFT2",
    [2] = _G.keepdef2,
    [3] = _G.keepmelee2,
    [4] = _G.keepsnip2,
    [5] = _G.keepsword2,
    [6] = _G.budget2
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))
elseif _G.sniperspin2 == true then
local args = {
    [1] = "DFT2",
    [2] = _G.keepdef2,
    [3] = _G.keepmelee2,
    [4] = _G.keepsnip2,
    [5] = _G.keepsword2,
    [6] = _G.budget2
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))
elseif _G.meleespin2 == true then
local args = {
    [1] = "DFT2",
    [2] = _G.keepdef2,
    [3] = _G.keepmelee2,
    [4] = _G.keepsnip2,
    [5] = _G.keepsword2,
    [6] = _G.budget2
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))
elseif _G.defspin2 == true then
local args = {
    [1] = "DFT2",
    [2] = _G.keepdef2,
    [3] = _G.keepmelee2,
    [4] = _G.keepsnip2,
    [5] = _G.keepsword2,
    [6] = _G.budget2
}

workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args))
end
wait(12)
                    end)
                end
            end
            end)

spawn(function()
	while wait() do
		if _G.quayfirstdf2 or _G.quayfirstdf then
                	pcall(function()
local plrid = tostring(game.Players.LocalPlayer.UserId)
local plr = tostring(game.Players.LocalPlayer)
if game.Players[""..plr].PlayerGui.Challenges.Frame.Frame.ChallengesFrame.ScrollingFrame["Challenge_12"].Claim.AutoButtonColor == true then
workspace.UserData["User_"..plrid].ChallengesRemote:FireServer("Claim","Challenge12")
end
			end)		
		end
	end
end)


local c1 = Tabs.Affinity:AddSection("                                                -----")
local c2 = Tabs.Affinity:AddSection("                                                -----")
local c3 = Tabs.Affinity:AddSection("                                                -----")
local c4 = Tabs.Main:AddSection("                                                -----")
local c5 = Tabs.Main:AddSection("                                                -----")
local c6 = Tabs.Main:AddSection("                                                -----")



-- Addons:
-- SaveManager (Allows you to have a configuration system)
-- InterfaceManager (Allows you to have a interface managment system)

-- Hand the library over to our managers
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

-- Ignore keys that are used by ThemeManager.
-- (we dont want configs to save themes, do we?)
SaveManager:IgnoreThemeSettings()

-- You can add indexes of elements the save manager should ignore
SaveManager:SetIgnoreIndexes({})

-- use case for doing it this way:
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

local q = Tabs.Settings:AddSection("                                                -----")
local qq = Tabs.Settings:AddSection("                                                -----")


Window:SelectTab(1)

Fluent:Notify({
    Title = "Saluna With Love ♥",
    Content = "Have a nice day!",
    Duration = 15
})

-- You can use the SaveManager:LoadAutoloadConfig() to load a config
-- which has been marked to be one that auto loads!
SaveManager:LoadAutoloadConfig()
--------
local BBB = Instance.new("ScreenGui")
BBB.Name = "BBB"
BBB.Parent = game.CoreGui
local hideUI = Instance.new("TextButton")
hideUI.Name = "hideUI"
hideUI.Parent = BBB
hideUI.BackgroundColor3 = Color3.fromRGB(0, 255, 127)
hideUI.ClipsDescendants = true
hideUI.Position = UDim2.new(0.005, 1, 0.013, 1)
hideUI.Size = UDim2.new(0.131, 0, 0.133, 0)
hideUI.AutoButtonColor = false
hideUI.TextWrapped = true
hideUI.TextScaled = true
hideUI.Font = Enum.Font.SourceSans
hideUI.Text = "HIDE/SHOW UI"
hideUI.TextColor3 = Color3.fromRGB(0, 0, 0)
hideUI.TextSize = 14
hideUI.MouseButton1Up:Connect(function()
game:GetService("VirtualInputManager"):SendKeyEvent(true,"LeftControl",false,game.Players.LocalPlayer.Character.HumanoidRootPart)
wait(0.1)
game:GetService("VirtualInputManager"):SendKeyEvent(false,"LeftControl",false,game.Players.LocalPlayer.Character.HumanoidRootPart)
end)

else
game.Players.LocalPlayer:Kick("KICKED      SALUNA Notify: Your HWID Wasn't Whitelisted")
everyClipboard = toclipboard
function toClipboard(txt)
    if everyClipboard then
        everyClipboard(tostring(txt))
    end
end
toClipboard("https://discord.gg/ecpbhm8G3w")
end
end
